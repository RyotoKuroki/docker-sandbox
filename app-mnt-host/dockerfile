# ベースイメージとして Node.js 18 を使用
FROM node:18-alpine

# コンテナ内に作業ディレクトリを作成
WORKDIR /app

# ホストマシンから必要なファイルをコンテナにコピー
# 例: アプリケーションのソースコード、package.json など
COPY ./myapp /app

# コンテナ内に作業ディレクトリを作成
#WORKDIR /app

# アプリケーションの依存関係をインストール
RUN npm install

# アプリケーションがリッスンするポートを指定
EXPOSE 3000

# コンテナ起動時に実行するコマンドを定義
#CMD ["npm", "run", "dev"]


#このDockerfileは、Node.js 18アプリケーションをコンテナ化するための基本的な手順を記述します。
#
#1.  **ベースイメージの設定:**
#    `FROM node:18-alpine` は、Node.js 18がインストールされたAlpine Linuxという軽量なLinuxディストリビューションをベースイメージとして使用することを指定します。Alpine Linuxは小さく、コンテナイメージのサイズを削減するのに役立ちます。
#2.  **作業ディレクトリの作成:**
#    `WORKDIR /app` は、コンテナ内に`/app`というディレクトリを作成し、以降の命令の実行ディレクトリを`/app`に設定します。
#3.  **ファイルのコピー:**
#    `COPY . /app` は、ホストマシンの現在のディレクトリにあるすべてのファイルとディレクトリをコンテナの`/app`ディレクトリにコピーします。  必要に応じて、コピーするファイルやディレクトリをより具体的に指定することも可能です。
#4.  **依存関係のインストール:**
#    `RUN npm install` は、コンテナ内で`npm install`を実行して、アプリケーションの依存関係をインストールします。
#5.  **ポートの公開:**
#    `EXPOSE 3000` は、コンテナがポート3000でリッスンすることをDockerに伝えます。  アプリケーションが別のポートを使用する場合は、それに応じてこの値を変更する必要があります。
#6.  **起動コマンドの定義:**
#    `CMD ["npm", "start"]` は、コンテナ起動時に実行するコマンドを指定します。  この例では、`npm start`を実行してNode.jsアプリケーションを起動します。  アプリケーションの起動コマンドが異なる場合は、この値を変更する必要があります。
#
#このDockerfileをアプリケーションのルートディレクトリに保存し、`docker build -t my-node-app .` のようなコマンドを実行して、Node.js 18アプリケーションのDockerイメージを構築できます。  `-t my-node-app` は、作成するイメージに "my-node-app" というタグを付けるためのオプションです。  `.` は、Dockerfileが現在のディレクトリにあることを示し
#
